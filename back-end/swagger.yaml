openapi: 3.0.3
info:
  title: API - Application Express Auth & Contacts
  description: >
    Documentation Swagger pour l'API Express gérant l'authentification, 
    les utilisateurs et les contacts.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Serveur local de développement

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 64ab23e1f1a2b3c456d7890a
        email:
          type: string
          example: utilisateur@example.com
        password:
          type: string
          example: "********"
    Contact:
      type: object
      properties:
        id:
          type: string
          example: 64ab23e1f1a2b3c456d7890a
        name:
          type: string
          example: Jean Dupont
        email:
          type: string
          example: jean.dupont@example.com
        phone:
          type: string
          example: "+33 6 12 34 56 78"
        createdAt:
          type: string
          format: date-time
          example: 2025-10-06T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-10-06T12:00:00Z

paths:
  /auth/register:
    post:
      summary: Inscription d'un nouvel utilisateur
      tags: [Authentification]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: motdepasse123
      responses:
        "201":
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Utilisateur enregistré avec succès
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "400":
          description: Erreur de validation ou email déjà utilisé

  /auth/login:
    post:
      summary: Connexion d'un utilisateur existant
      tags: [Authentification]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: motdepasse123
      responses:
        "200":
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Connexion réussie
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "401":
          description: Identifiants invalides

  /contacts:
    get:
      summary: Récupérer tous les contacts de l’utilisateur connecté
      tags: [Contacts]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste des contacts récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
        "401":
          description: Non autorisé
    post:
      summary: Créer un nouveau contact
      tags: [Contacts]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
      responses:
        "201":
          description: Contact créé avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          description: Erreur de validation
        "401":
          description: Non autorisé

  /contacts/{id}:
    patch:
      summary: Modifier un contact existant
      tags: [Contacts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du contact à modifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
      responses:
        "200":
          description: Contact mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "404":
          description: Contact introuvable
        "401":
          description: Non autorisé
    delete:
      summary: Supprimer un contact
      tags: [Contacts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du contact à supprimer
          schema:
            type: string
      responses:
        "200":
          description: Contact supprimé avec succès
        "404":
          description: Contact introuvable
        "401":
          description: Non autorisé

  /users/me:
    get:
      summary: Obtenir le profil de l’utilisateur connecté
      tags: [Utilisateur]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profil récupéré avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Non autorisé

  /users/password:
    patch:
      summary: Mettre à jour le mot de passe de l’utilisateur
      tags: [Utilisateur]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: ancienMotDePasse123
                newPassword:
                  type: string
                  example: nouveauMotDePasse456
      responses:
        "200":
          description: Mot de passe mis à jour avec succès
        "400":
          description: Mauvais mot de passe actuel
        "401":
          description: Non autorisé
